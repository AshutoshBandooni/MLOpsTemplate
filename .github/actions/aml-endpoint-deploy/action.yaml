name: Deploy AzureML managed online endpoint
description: 'Deploys a model endpoint in Azure Machine Learning Services all along with all the deployments it contains. Logs are collected and uploaded.'

inputs:
  endpointFile:
    description: 'Path to the endpoint YAML file. Wildcard paths are supported which means that all matched endpoints will be deployed.'
    required: true
  deploymentFile:
    description: 'Path to the deployment YAML files for the given endpoints. This path is relative to the path where the endpoints are located.'
    required: true
  modelVersion:
    description: 'Model version you want to deploy. If this specified, it will overwrite the version indicated in the deployment file. Otherwise, the one indicated there will be used.'
    required: false
    default: ''
  workspaceName:
    description: 'Name of the workspace to work against.'
    required: true
  resourceGroup:
    description: 'Name of the resource group where the workspace is placed.'
    required: true
  noWait:
    description: 'Indicates if the action should not wait for the deployment to finish.'
    required: false
    default: 'false'
  updateIfExists:
    description: 'If endpoint exists, by pass creation, if deployment exist, update it'
    required: false
    default: 'true'
outputs:
  deployedVersion:
    description: 'Deployed version of the model'
    value: ${{ steps.deployment.outputs.deployedVersion }}

runs:
  using: "composite"
  steps:
    - name: Deploy endpoint
      id: deployment
      shell: bash
      run: |
        set -e
        az configure --defaults workspace=${{ inputs.workspaceName }} group=${{ inputs.resourceGroup }}

        ENDPOINT_FILES=$(find ${{ inputs.endpointFile }})
        for ENDPOINT_FILE in $ENDPOINT_FILES
        do
          ENDPOINT_FOLDER=$(dirname $ENDPOINT_FILE)
          ENDPOINT_NAME=$(yq -r ".name" $ENDPOINT_FILE)
          echo "ENDPOINT_FOLDER: $ENDPOINT_FOLDER"
          echo "ENDPOINT_NAME: $ENDPOINT_NAME"

          # We are removing traffic key since this has the chicken and the egg issue. If you place .traffic you have
          # to deploy the deployment first. But you can't deploy deployments without an endpoint.
          echo "::debug::Rewriting endpoint file without traffic"
          yq -y "del(.traffic)" $ENDPOINT_FILE > $ENDPOINT_NAME.yml
          if ${{ inputs.updateIfExists }}; then
            { 
                echo "Creating endpoint with name: $ENDPOINT_NAME" &&
                az ml online-endpoint create -f $ENDPOINT_NAME.yml
            } || { 
                echo "Endpoint $ENDPOINT_NAME already exists, bypassing endpoint creation"
            }
          fi

          echo "::debug::Retrieving URL and credentials"
          SCORING_URI=$(az ml online-endpoint show -n $ENDPOINT_NAME | jq -r ".scoring_uri")
          SCORING_KEY=$(az ml online-endpoint get-credentials -n $ENDPOINT_NAME -o tsv --query primaryKey)
            
          echo "::debug::Looking for deployments in folder $ENDPOINT_FOLDER/${{ inputs.deploymentFile }}"
          DEPLOYMENT_FILES=$(find $ENDPOINT_FOLDER/${{ inputs.deploymentFile }})
          
          echo "Reading endpoint traffic to figure out which deployment is staging/production"
          az ml online-endpoint show -n $ENDPOINT_NAME --query "traffic" -o yaml > endpoint_traffic.yml
          echo "Endpoint traffic:"
          cat endpoint_traffic.yml
          GREEN_TRAFFIC=$(yq .green endpoint_traffic.yml)
          BLUE_TRAFFIC=$(yq .blue endpoint_traffic.yml)
          if [[ $GREEN_TRAFFIC == null || $GREEN_TRAFFIC == 0 ]]; then
              STAGING_DEPLOYMENT_NAME='green';
          else
              if [[ $BLUE_TRAFFIC == null || $BLUE_TRAFFIC == 0 ]]; then
                  STAGING_DEPLOYMENT_NAME='blue';
              else
                  echo "::error::No staging slots available for endpoint $ENDPOINT_NAME. One of the green/blue slots needs to have 0% traffic.";
                  exit 1;
              fi
          fi
          echo "STAGING_DEPLOYMENT_NAME: $STAGING_DEPLOYMENT_NAME"

          for DEPLOYMENT_FILE in $DEPLOYMENT_FILES
          do
            echo "::debug::Working on deployment file $DEPLOYMENT_FILE"
            if [[ $STAGING_DEPLOYMENT_NAME == "blue" ]]; then
              yq -y -i '.name= "blue"' $DEPLOYMENT_FILE;
            else
              yq -y -i '.name= "green"' $DEPLOYMENT_FILE;
            fi
            DEPLOYMENT_MODEL=$(yq -r ".model" $DEPLOYMENT_FILE | cut -d: -f2)
            DEPLOYMENT_MODEL_VERSION=$(yq -r ".model" $DEPLOYMENT_FILE | cut -d: -f3)

            # User can overwrite the version in the YAML 
            if [ -z "${{ inputs.modelVersion }}" ]; then
              TARGET_MODEL_VERSION=$DEPLOYMENT_MODEL_VERSION
            else
              echo "::debug::Model being targeted is being overwriten with version ${{ inputs.modelVersion }}"
              TARGET_MODEL_VERSION=${{ inputs.modelVersion }}
            fi
            
            echo "::debug::Working on deployment with name: $ENDPOINT_NAME/$STAGING_DEPLOYMENT_NAME"

            if [[ "$TARGET_MODEL_VERSION" == "current" ]]; then
              echo "::debug::Identifying current version of the model at deployment $ENDPOINT_NAME/$STAGING_DEPLOYMENT_NAME"
              MODEL_CURRENT_URL=$(az ml online-deployment show --name $STAGING_DEPLOYMENT_NAME --endpoint-name $ENDPOINT_NAME | jq -r ".model")
              MODEL_CURRENT=$(basename $MODEL_CURRENT_URL)

              echo "::debug::Updating yaml files with current model version: $MODEL_CURRENT"
              sed -i 's/:'$DEPLOYMENT_MODEL_VERSION'/:'$MODEL_CURRENT'/' $DEPLOYMENT_FILE
            fi

            if [[ "$TARGET_MODEL_VERSION" == "latest" ]]; then
              echo "::debug::Identifying latest version of the model $DEPLOYMENT_MODEL"
              MODEL_LATEST=$(az ml model list --name $DEPLOYMENT_MODEL | jq -r '.[0].version')
              
              echo "::debug::Updating yaml files with latest model version: $MODEL_LATEST"
              sed -i 's/:'$DEPLOYMENT_MODEL_VERSION'/:'$MODEL_LATEST'/' $DEPLOYMENT_FILE 
            fi

            if [[ "$TARGET_MODEL_VERSION" == *=* ]]; then
              echo "::debug::Identifying version of the model $DEPLOYMENT_MODEL with tags $TARGET_MODEL_VERSION"
              TARGET_MODEL_TAG=$($TARGET_MODEL_VERSION | cut -d= -f1)
              TARGET_MODEL_TVALUE=$($TARGET_MODEL_VERSION | cut -d= -f2)

              MODEL_TAGGED=$(az ml model list -n $DEPLOYMENT_MODEL | jq -r --arg TARGET_MODEL_TAG $TARGET_MODEL_TAG --arg TARGET_MODEL_TVALUE $TARGET_MODEL_TVALUE '.[] | select(.tags.$TARGET_MODEL_TAG == $TARGET_MODEL_TVALUE) | .version')
              echo "::debug::Updating yaml files with model version: $MODEL_TAGGED"
              sed -i 's/:'$DEPLOYMENT_MODEL_VERSION'/:'$MODEL_TAGGED'/' $DEPLOYMENT_FILE 
            fi

            echo "::debug::Creating deployment with name: $ENDPOINT_NAME/$STAGING_DEPLOYMENT_NAME"
            if ${{ inputs.noWait }}; then
              az ml online-deployment create -f $DEPLOYMENT_FILE --only-show-errors --no-wait --set tags.git_commit=${GITHUB_SHA}
            else
              az ml online-deployment create -f $DEPLOYMENT_FILE --only-show-errors --set tags.git_commit=${GITHUB_SHA}

              echo "::debug::Configuring traffic for $ENDPOINT_NAME/$STAGING_DEPLOYMENT_NAME"
              TRAFFIC=$(yq --arg STAGING_DEPLOYMENT_NAME $STAGING_DEPLOYMENT_NAME '.traffic | select(has($STAGING_DEPLOYMENT_NAME)) | .[]' $ENDPOINT_FILE)
              if [[ -n $TRAFFIC ]]; then
                echo "::debug::Configuring traffic for $ENDPOINT_NAME/$STAGING_DEPLOYMENT_NAME with value $TRAFFIC"
                az ml online-endpoint update -n $ENDPOINT_NAME --traffic "$STAGING_DEPLOYMENT_NAME=$TRAFFIC"
              else
                echo "::warning file=$ENDPOINT_FILE::Traffic is not indicated for $ENDPOINT_NAME/$STAGING_DEPLOYMENT_NAME. You will have to configure traffic later."
              fi
  
              echo "::debug::Adquiring logs for deployment with name: $ENDPOINT_NAME/$STAGING_DEPLOYMENT_NAME"
              mkdir -p logs
              az ml online-deployment get-logs --name $STAGING_DEPLOYMENT_NAME --endpoint-name $ENDPOINT_NAME >> logs/$ENDPOINT_NAME_$STAGING_DEPLOYMENT_NAME.log
            fi

            echo "::debug::Deployment completed"
          done
        
          echo "::debug::Getting deployed version for model at file $DEPLOYMENT_FILE"
          DEPLOYED_VERSION=$(yq -r ".model" $DEPLOYMENT_FILE | cut -d: -f3)
          echo "::set-output name=deployedVersion::$DEPLOYED_VERSION"
          echo "Model deployed version is: $DEPLOYED_VERSION"

          echo "::debug::Endpoint deployment completed"
        done

    - name: Upload deployment logs
      uses: actions/upload-artifact@v2
      if: ${{ (failure() || success()) && inputs.noWait == 'false' }}
      with:
        name: deployment-logs
        path: logs/*
